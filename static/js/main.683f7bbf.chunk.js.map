{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","endpoint","fetch","then","response","json","result","data","getUser","userId","TodoList","state","titleFilter","statusFilter","this","props","todos","onUserIdSelected","selectedUserId","todosToDisplay","filter","todo","title","includes","completed","className","htmlFor","type","id","placeholder","value","onChange","event","setState","target","map","key","classNames","checked","readOnly","onClick","React","Component","CurrentUser","user","selectUser","prevProps","clearSelectedUser","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.683f7bbf.chunk.js","sourcesContent":["const API_URL = `https://mate-api.herokuapp.com/`;\n\nfunction request(endpoint) {\n  return fetch(`${API_URL}${endpoint}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getTodos = () => request('todos');\nexport const getUser = userId => request(`users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleFilter: '',\n    statusFilter: '',\n  };\n\n  render() {\n    const { titleFilter, statusFilter } = this.state;\n    const {\n      todos,\n      onUserIdSelected,\n      selectedUserId, \n    } = this.props;\n\n    const todosToDisplay = todos\n      .filter(todo => todo.title)\n      .filter(todo => todo.title.includes(titleFilter))\n      .filter(todo => {\n        switch (statusFilter) {\n          case 'active':\n          return !todo.completed;\n\n          case 'completed':\n          return todo.completed;\n\n          case 'all':\n          default:\n          return todo;\n        }\n      });\n    \n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label htmlFor=\"filterByTitle\">\n          <span>\n            Filter todos by title\n          </span>\n          <input\n            type=\"text\"\n            id=\"filterByTitle\"\n            placeholder=\"Enter a query\"\n            value={titleFilter}\n            onChange={(event) => {\n              this.setState({ titleFilter: event.target.value})\n            }}\n          />\n        </label>\n\n        <select\n          value={statusFilter}\n          onChange={(event) => {\n            this.setState({ statusFilter: event.target.value})\n            }}\n        >\n          <option value=\"all\">\n            Show all todos\n          </option>\n          <option value=\"active\">\n            Show active todos\n          </option>\n          <option value=\"completed\">\n            Show completed todos\n          </option>\n        </select>\n    \n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosToDisplay.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames({\n                  'TodoList__item': true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly \n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n    \n              <button\n                type=\"button\"\n                className={classNames({\n                  'button': true,\n                  'TodoList__user-button': true,\n                  'TodoList__user-button--selected': selectedUserId === todo.userId,\n                })}\n                onClick={() => {\n                  onUserIdSelected(todo.userId)\n                }}\n              >\n                User&nbsp;#{todo.userId}\n              </button>\n            </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n} ;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  onUserIdSelected: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.selectUser();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n    this.selectUser();\n  }\n\n  selectUser = () => {\n    getUser(this.props.userId)\n      .then(user => {\n        this.setState({ user })\n      })\n  }\n\n  render() {\n    const { userId, clearSelectedUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user: {userId}\n          </span>\n        </h2>\n        {!user ? (\n          <p>\n            Loading...\n          </p>\n        ) : (\n          <>\n            <h3 className=\"CurrentUser__name\">\n            {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n            <button\n              type=\"button\"\n              onClick={clearSelectedUser}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n};\n\nCurrentUser.propTypes = {\n  clearSelectedUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/api';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => \n        this.setState({ todos }))\n  };\n\n  clearSelectedUser = () => {\n    this.setState({selectedUserId: 0})\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    const setUserId = (userId) => {\n      this.setState({selectedUserId: userId})\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserIdSelected={setUserId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}